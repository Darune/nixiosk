diff --git a/backend/drm/atomic.c b/backend/drm/atomic.c
index 71b18f98..ecfadce0 100644
--- a/backend/drm/atomic.c
+++ b/backend/drm/atomic.c
@@ -45,20 +45,18 @@ static bool atomic_end(int drm_fd, struct atomic *atom) {
 
 static bool atomic_commit(int drm_fd, struct atomic *atom,
 		struct wlr_drm_connector *conn, uint32_t flags, bool modeset) {
-	struct wlr_drm_backend *drm =
-		get_drm_backend_from_backend(conn->output.backend);
 	if (atom->failed) {
 		return false;
 	}
 
-	int ret = drmModeAtomicCommit(drm_fd, atom->req, flags, drm);
+	int ret = drmModeAtomicCommit(drm_fd, atom->req, flags, conn);
 	if (ret) {
 		wlr_log_errno(WLR_ERROR, "%s: Atomic commit failed (%s)",
 			conn->output.name, modeset ? "modeset" : "pageflip");
 
 		// Try to commit without new changes
 		drmModeAtomicSetCursor(atom->req, atom->cursor);
-		if (drmModeAtomicCommit(drm_fd, atom->req, flags, drm)) {
+		if (drmModeAtomicCommit(drm_fd, atom->req, flags, conn)) {
 			wlr_log_errno(WLR_ERROR,
 				"%s: Atomic commit without new changes failed (%s)",
 				conn->output.name, modeset ? "modeset" : "pageflip");
diff --git a/backend/drm/drm.c b/backend/drm/drm.c
index db6f0207..cbf5af08 100644
--- a/backend/drm/drm.c
+++ b/backend/drm/drm.c
@@ -52,11 +52,6 @@ bool check_drm_features(struct wlr_drm_backend *drm) {
 		return false;
 	}
 
-	if (drmGetCap(drm->fd, DRM_CAP_CRTC_IN_VBLANK_EVENT, &cap) || !cap) {
-		wlr_log(WLR_ERROR, "DRM_CRTC_IN_VBLANK_EVENT unsupported");
-		return false;
-	}
-
 	const char *no_atomic = getenv("WLR_DRM_NO_ATOMIC");
 	if (no_atomic && strcmp(no_atomic, "1") == 0) {
 		wlr_log(WLR_DEBUG,
@@ -1496,21 +1491,10 @@ static int mhz_to_nsec(int mhz) {
 }
 
 static void page_flip_handler(int fd, unsigned seq,
-		unsigned tv_sec, unsigned tv_usec, unsigned crtc_id, void *data) {
-	struct wlr_drm_backend *drm = data;
-	struct wlr_drm_connector *conn = NULL;
-	struct wlr_drm_connector *search;
-
-	wl_list_for_each(search, &drm->outputs, link) {
-		if (search->crtc && search->crtc->id == crtc_id) {
-			conn = search;
-		}
-	}
-
-	if (!conn) {
-		wlr_log(WLR_DEBUG, "No connector for crtc_id %u", crtc_id);
-		return;
-	}
+		unsigned tv_sec, unsigned tv_usec, void *data) {
+	struct wlr_drm_connector *conn = data;
+	struct wlr_drm_backend *drm =
+		get_drm_backend_from_backend(conn->output.backend);
 
 	conn->pageflip_pending = false;
 
@@ -1563,8 +1547,8 @@ static void page_flip_handler(int fd, unsigned seq,
 
 int handle_drm_event(int fd, uint32_t mask, void *data) {
 	drmEventContext event = {
-		.version = 3,
-		.page_flip_handler2 = page_flip_handler,
+		.version = 2,
+		.page_flip_handler = page_flip_handler,
 	};
 
 	drmHandleEvent(fd, &event);
diff --git a/backend/drm/legacy.c b/backend/drm/legacy.c
index 32d68814..bb72598d 100644
--- a/backend/drm/legacy.c
+++ b/backend/drm/legacy.c
@@ -17,7 +17,7 @@ static bool legacy_crtc_pageflip(struct wlr_drm_backend *drm,
 		}
 	}
 
-	if (drmModePageFlip(drm->fd, crtc->id, fb_id, DRM_MODE_PAGE_FLIP_EVENT, drm)) {
+	if (drmModePageFlip(drm->fd, crtc->id, fb_id, DRM_MODE_PAGE_FLIP_EVENT, conn)) {
 		wlr_log_errno(WLR_ERROR, "%s: Failed to page flip", conn->output.name);
 		return false;
 	}
